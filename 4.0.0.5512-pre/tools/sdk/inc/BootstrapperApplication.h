#pragma once
// Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the Microsoft Reciprocal License. See LICENSE.TXT file in the project root for full license information.


enum BOOTSTRAPPER_DISPLAY
{
    BOOTSTRAPPER_DISPLAY_UNKNOWN,
    BOOTSTRAPPER_DISPLAY_EMBEDDED,
    BOOTSTRAPPER_DISPLAY_NONE,
    BOOTSTRAPPER_DISPLAY_PASSIVE,
    BOOTSTRAPPER_DISPLAY_FULL,
};

enum BOOTSTRAPPER_RESTART
{
    BOOTSTRAPPER_RESTART_UNKNOWN,
    BOOTSTRAPPER_RESTART_NEVER,
    BOOTSTRAPPER_RESTART_PROMPT,
    BOOTSTRAPPER_RESTART_AUTOMATIC,
    BOOTSTRAPPER_RESTART_ALWAYS,
};

enum BOOTSTRAPPER_RESUME_TYPE
{
    BOOTSTRAPPER_RESUME_TYPE_NONE,
    BOOTSTRAPPER_RESUME_TYPE_INVALID,        // resume information is present but invalid
    BOOTSTRAPPER_RESUME_TYPE_INTERRUPTED,    // relaunched after an unexpected interruption
    BOOTSTRAPPER_RESUME_TYPE_REBOOT_PENDING, // reboot has not taken place yet
    BOOTSTRAPPER_RESUME_TYPE_REBOOT,         // relaunched after reboot
    BOOTSTRAPPER_RESUME_TYPE_SUSPEND,        // relaunched after suspend
    BOOTSTRAPPER_RESUME_TYPE_ARP,            // launched from ARP
};

enum BOOTSTRAPPER_ERROR_TYPE
{
    BOOTSTRAPPER_ERROR_TYPE_ELEVATE,            // error occurred trying to elevate.
    BOOTSTRAPPER_ERROR_TYPE_WINDOWS_INSTALLER,  // error came from windows installer.
    BOOTSTRAPPER_ERROR_TYPE_EXE_PACKAGE,        // error came from an exe package.
    BOOTSTRAPPER_ERROR_TYPE_HTTP_AUTH_SERVER,   // error occurred trying to authenticate with HTTP server.
    BOOTSTRAPPER_ERROR_TYPE_HTTP_AUTH_PROXY,    // error occurred trying to authenticate with HTTP proxy.
    BOOTSTRAPPER_ERROR_TYPE_APPLY,              // error occurred during apply.
};

enum BOOTSTRAPPER_RELATED_OPERATION
{
    BOOTSTRAPPER_RELATED_OPERATION_NONE,
    BOOTSTRAPPER_RELATED_OPERATION_DOWNGRADE,
    BOOTSTRAPPER_RELATED_OPERATION_MINOR_UPDATE,
    BOOTSTRAPPER_RELATED_OPERATION_MAJOR_UPGRADE,
    BOOTSTRAPPER_RELATED_OPERATION_REMOVE,
    BOOTSTRAPPER_RELATED_OPERATION_INSTALL,
    BOOTSTRAPPER_RELATED_OPERATION_REPAIR,
};

enum BOOTSTRAPPER_CACHE_OPERATION
{
    BOOTSTRAPPER_CACHE_OPERATION_COPY,
    BOOTSTRAPPER_CACHE_OPERATION_DOWNLOAD,
    BOOTSTRAPPER_CACHE_OPERATION_EXTRACT,
};

enum BOOTSTRAPPER_APPLY_RESTART
{
    BOOTSTRAPPER_APPLY_RESTART_NONE,
    BOOTSTRAPPER_APPLY_RESTART_REQUIRED,
    BOOTSTRAPPER_APPLY_RESTART_INITIATED,
};

enum BOOTSTRAPPER_RELATION_TYPE
{
    BOOTSTRAPPER_RELATION_NONE,
    BOOTSTRAPPER_RELATION_DETECT,
    BOOTSTRAPPER_RELATION_UPGRADE,
    BOOTSTRAPPER_RELATION_ADDON,
    BOOTSTRAPPER_RELATION_PATCH,
    BOOTSTRAPPER_RELATION_DEPENDENT,
    BOOTSTRAPPER_RELATION_UPDATE,
};

enum BOOTSTRAPPER_APPLICATION_MESSAGE
{
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONDETECTBEGIN,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONDETECTCOMPLETE,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONPLANBEGIN,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONPLANCOMPLETE,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONSTARTUP,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONSHUTDOWN,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONSYSTEMSHUTDOWN,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONDETECTFORWARDCOMPATIBLEBUNDLE,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONDETECTUPDATEBEGIN,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONDETECTUPDATE,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONDETECTUPDATECOMPLETE,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONDETECTRELATEDBUNDLE,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONDETECTPACKAGEBEGIN,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONDETECTCOMPATIBLEMSIPACKAGE,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONDETECTRELATEDMSIPACKAGE,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONDETECTTARGETMSIPACKAGE,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONDETECTMSIFEATURE,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONDETECTPACKAGECOMPLETE,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONPLANRELATEDBUNDLE,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONPLANPACKAGEBEGIN,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONPLANCOMPATIBLEMSIPACKAGEBEGIN,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONPLANCOMPATIBLEMSIPACKAGECOMPLETE,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONPLANTARGETMSIPACKAGE,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONPLANMSIFEATURE,
    BOOTSTRAPPER_APPLICATION_MESSAGE_ONPLANPACKAGECOMPLETE,
};

enum BOOTSTRAPPER_SHUTDOWN_ACTION
{
    BOOTSTRAPPER_SHUTDOWN_ACTION_NONE,
    // Instructs the engine to restart.
    // The engine will not launch again after the machine is rebooted.
    // Ignored if reboot was already initiated by OnExecutePackageComplete().
    BOOTSTRAPPER_SHUTDOWN_ACTION_RESTART,
    // Instructs the engine to unload the bootstrapper application and
    // restart the engine which will load the bootstrapper application again.
    // Typically used to switch from a native bootstrapper application to a managed one.
    BOOTSTRAPPER_SHUTDOWN_ACTION_RELOAD_BOOTSTRAPPER,
};

struct BOOTSTRAPPER_COMMAND
{
    BOOTSTRAPPER_ACTION action;
    BOOTSTRAPPER_DISPLAY display;
    BOOTSTRAPPER_RESTART restart;

    LPWSTR wzCommandLine;
    int nCmdShow;

    BOOTSTRAPPER_RESUME_TYPE resumeType;
    HWND hwndSplashScreen;

    // If this was run from a related bundle, specifies the relation type
    BOOTSTRAPPER_RELATION_TYPE relationType;
    BOOL fPassthrough;

    LPWSTR wzLayoutDirectory;
};

struct BA_ONDETECTBEGIN_ARGS
{
    DWORD cbSize;
    BOOL fInstalled;
    DWORD cPackages;
};

struct BA_ONDETECTBEGIN_RESULTS
{
    DWORD cbSize;
    BOOL fCancel;
};

struct BA_ONDETECTCOMPATIBLEMSIPACKAGE_ARGS
{
    DWORD cbSize;
    LPCWSTR wzPackageId;
    LPCWSTR wzCompatiblePackageId;
    DWORD64 dw64CompatiblePackageVersion;
};

struct BA_ONDETECTCOMPATIBLEMSIPACKAGE_RESULTS
{
    DWORD cbSize;
    BOOL fCancel;
};

struct BA_ONDETECTCOMPLETE_ARGS
{
    DWORD cbSize;
    HRESULT hrStatus;
};

struct BA_ONDETECTCOMPLETE_RESULTS
{
    DWORD cbSize;
};

struct BA_ONDETECTFORWARDCOMPATIBLEBUNDLE_ARGS
{
    DWORD cbSize;
    LPCWSTR wzBundleId;
    BOOTSTRAPPER_RELATION_TYPE relationType;
    LPCWSTR wzBundleTag;
    BOOL fPerMachine;
    DWORD64 dw64Version;
};

struct BA_ONDETECTFORWARDCOMPATIBLEBUNDLE_RESULTS
{
    DWORD cbSize;
    BOOL fCancel;
    BOOL fIgnoreBundle;
};

struct BA_ONDETECTMSIFEATURE_ARGS
{
    DWORD cbSize;
    LPCWSTR wzPackageId;
    LPCWSTR wzFeatureId;
    BOOTSTRAPPER_FEATURE_STATE state;
};

struct BA_ONDETECTMSIFEATURE_RESULTS
{
    DWORD cbSize;
    BOOL fCancel;
};

struct BA_ONDETECTPACKAGEBEGIN_ARGS
{
    DWORD cbSize;
    LPCWSTR wzPackageId;
};

struct BA_ONDETECTPACKAGEBEGIN_RESULTS
{
    DWORD cbSize;
    BOOL fCancel;
};

struct BA_ONDETECTPACKAGECOMPLETE_ARGS
{
    DWORD cbSize;
    LPCWSTR wzPackageId;
    HRESULT hrStatus;
    BOOTSTRAPPER_PACKAGE_STATE state;
};

struct BA_ONDETECTPACKAGECOMPLETE_RESULTS
{
    DWORD cbSize;
};

struct BA_ONDETECTRELATEDBUNDLE_ARGS
{
    DWORD cbSize;
    LPCWSTR wzBundleId;
    BOOTSTRAPPER_RELATION_TYPE relationType;
    LPCWSTR wzBundleTag;
    BOOL fPerMachine;
    DWORD64 dw64Version;
    BOOTSTRAPPER_RELATED_OPERATION operation;
};

struct BA_ONDETECTRELATEDBUNDLE_RESULTS
{
    DWORD cbSize;
    BOOL fCancel;
};

struct BA_ONDETECTRELATEDMSIPACKAGE_ARGS
{
    DWORD cbSize;
    LPCWSTR wzPackageId;
    LPCWSTR wzUpgradeCode;
    LPCWSTR wzProductCode;
    BOOL fPerMachine;
    DWORD64 dw64Version;
    BOOTSTRAPPER_RELATED_OPERATION operation;
};

struct BA_ONDETECTRELATEDMSIPACKAGE_RESULTS
{
    DWORD cbSize;
    BOOL fCancel;
};

struct BA_ONDETECTTARGETMSIPACKAGE_ARGS
{
    DWORD cbSize;
    LPCWSTR wzPackageId;
    LPCWSTR wzProductCode;
    BOOTSTRAPPER_PACKAGE_STATE patchState;
};

struct BA_ONDETECTTARGETMSIPACKAGE_RESULTS
{
    DWORD cbSize;
    BOOL fCancel;
};

struct BA_ONDETECTUPDATE_ARGS
{
    DWORD cbSize;
    LPCWSTR wzUpdateLocation;
    DWORD64 dw64Size;
    DWORD64 dw64Version;
    LPCWSTR wzTitle;
    LPCWSTR wzSummary;
    LPCWSTR wzContentType;
    LPCWSTR wzContent;
};

struct BA_ONDETECTUPDATE_RESULTS
{
    DWORD cbSize;
    BOOL fCancel;
    BOOL fStopProcessingUpdates;
};

struct BA_ONDETECTUPDATEBEGIN_ARGS
{
    DWORD cbSize;
    LPCWSTR wzUpdateLocation;
};

struct BA_ONDETECTUPDATEBEGIN_RESULTS
{
    DWORD cbSize;
    BOOL fCancel;
    BOOL fSkip;
};

struct BA_ONDETECTUPDATECOMPLETE_ARGS
{
    DWORD cbSize;
    HRESULT hrStatus;
};

struct BA_ONDETECTUPDATECOMPLETE_RESULTS
{
    DWORD cbSize;
    BOOL fIgnoreError;
};

struct BA_ONPLANBEGIN_ARGS
{
    DWORD cbSize;
    DWORD cPackages;
};

struct BA_ONPLANBEGIN_RESULTS
{
    DWORD cbSize;
    BOOL fCancel;
};

struct BA_ONPLANCOMPATIBLEMSIPACKAGEBEGIN_ARGS
{
    DWORD cbSize;
    LPCWSTR wzPackageId;
    LPCWSTR wzCompatiblePackageId;
    DWORD64 dw64CompatiblePackageVersion;
};

struct BA_ONPLANCOMPATIBLEMSIPACKAGEBEGIN_RESULTS
{
    DWORD cbSize;
    BOOL fCancel;
    BOOTSTRAPPER_REQUEST_STATE requestedState;
};

struct BA_ONPLANCOMPATIBLEMSIPACKAGECOMPLETE_ARGS
{
    DWORD cbSize;
    LPCWSTR wzPackageId;
    LPCWSTR wzCompatiblePackageId;
    HRESULT hrStatus;
    BOOTSTRAPPER_PACKAGE_STATE state;
    BOOTSTRAPPER_REQUEST_STATE requested;
    BOOTSTRAPPER_ACTION_STATE execute;
    BOOTSTRAPPER_ACTION_STATE rollback;
};

struct BA_ONPLANCOMPATIBLEMSIPACKAGECOMPLETE_RESULTS
{
    DWORD cbSize;
};

struct BA_ONPLANCOMPLETE_ARGS
{
    DWORD cbSize;
    HRESULT hrStatus;
};

struct BA_ONPLANCOMPLETE_RESULTS
{
    DWORD cbSize;
};

struct BA_ONPLANMSIFEATURE_ARGS
{
    DWORD cbSize;
    LPCWSTR wzPackageId;
    LPCWSTR wzFeatureId;
};

struct BA_ONPLANMSIFEATURE_RESULTS
{
    DWORD cbSize;
    BOOTSTRAPPER_FEATURE_STATE requestedState;
    BOOL fCancel;
};

struct BA_ONPLANPACKAGEBEGIN_ARGS
{
    DWORD cbSize;
    LPCWSTR wzPackageId;
};

struct BA_ONPLANPACKAGEBEGIN_RESULTS
{
    DWORD cbSize;
    BOOL fCancel;
    BOOTSTRAPPER_REQUEST_STATE requestedState;
};

struct BA_ONPLANPACKAGECOMPLETE_ARGS
{
    DWORD cbSize;
    LPCWSTR wzPackageId;
    HRESULT hrStatus;
    BOOTSTRAPPER_PACKAGE_STATE state;
    BOOTSTRAPPER_REQUEST_STATE requested;
    BOOTSTRAPPER_ACTION_STATE execute;
    BOOTSTRAPPER_ACTION_STATE rollback;
};

struct BA_ONPLANPACKAGECOMPLETE_RESULTS
{
    DWORD cbSize;
};

struct BA_ONPLANRELATEDBUNDLE_ARGS
{
    DWORD cbSize;
    LPCWSTR wzBundleId;
};

struct BA_ONPLANRELATEDBUNDLE_RESULTS
{
    DWORD cbSize;
    BOOL fCancel;
    BOOTSTRAPPER_REQUEST_STATE requestedState;
};

struct BA_ONPLANTARGETMSIPACKAGE_ARGS
{
    DWORD cbSize;
    LPCWSTR wzPackageId;
    LPCWSTR wzProductCode;
};

struct BA_ONPLANTARGETMSIPACKAGE_RESULTS
{
    DWORD cbSize;
    BOOTSTRAPPER_REQUEST_STATE requestedState;
    BOOL fCancel;
};

struct BA_ONSHUTDOWN_ARGS
{
    DWORD cbSize;
};

struct BA_ONSHUTDOWN_RESULTS
{
    DWORD cbSize;
    BOOTSTRAPPER_SHUTDOWN_ACTION action;
};

struct BA_ONSTARTUP_ARGS
{
    DWORD cbSize;
};

struct BA_ONSTARTUP_RESULTS
{
    DWORD cbSize;
};

struct BA_ONSYSTEMSHUTDOWN_ARGS
{
    DWORD cbSize;
    DWORD dwEndSession;
};

struct BA_ONSYSTEMSHUTDOWN_RESULTS
{
    DWORD cbSize;
    BOOL fCancel;
};



extern "C" typedef HRESULT(WINAPI *PFN_BOOTSTRAPPER_APPLICATION_PROC)(
    __in BOOTSTRAPPER_APPLICATION_MESSAGE message,
    __in const LPVOID pvArgs,
    __inout LPVOID pvResults,
    __in_opt LPVOID pvContext
    );

extern "C" typedef void (WINAPI *PFN_BOOTSTRAPPER_APPLICATION_DESTROY)();
